trigger:
- main

parameters:
- name: PublishStore
  displayName: Publicar nas lojas
  type: boolean
  default: false

- name: dotnetVersion
  displayName: Vers√£o do .Net
  type: string
  default: 7.x

name: $(Major).$(Minor).$(Rev).$(Build.BuildId)

stages:

 - stage: build_android_ios
   displayName: "Build Android e iOS"
   jobs:
    - job: Job_Android
      displayName: Build Android
      pool:
        vmimage: 'windows-latest'
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: ${{ parameters.dotnetVersion }}

      - task: DownloadSecureFile@1
        name: keystore
        displayName: Download keystore 
        inputs:
          secureFile: '$(keystore-filename)'

      - script: |
          echo Downloaded $(keystore.secureFilePath)
          echo Working Directory $(Build.Repository.LocalPath)\Maui.AzurePipelines\$(keystore-filename)
          mv $(keystore.secureFilePath) $(Build.Repository.LocalPath)\Maui.AzurePipelines
        displayName: Movendo Keystore para diretorio de trabalho

      - task: Bash@3
        displayName: Instalando MAUI
        inputs:
          targetType: 'inline'
          script: |
            dotnet nuget locals all --clear 
            cd "Maui.AzurePipelines/"
            dotnet workload restore

      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: CmdLine@2
        displayName: 'Compilando Android App'
        inputs:
          script: |
            cd "Maui.AzurePipelines/"
            dotnet publish Maui.AzurePipelines.csproj -f net7.0-android -c Release /p:ApplicationDisplayVersion=$(Major).$(Minor).$(Rev) /p:ApplicationVersion=$(Build.BuildId) /p:AndroidSigningKeyPass=$(keystore-password) /p:AndroidSigningStorePass=$(keystore-password) /p:AndroidSigningKeyAlias=$(keystore-alias)

      - task: CopyFiles@2
        displayName: Copiando para o diretorio de artifacts
        inputs:
          Contents: |
            **/*.aab
            **/*.apk
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - task: PublishBuildArtifacts@1
        displayName: Liberando nos artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop_android'
          publishLocation: 'Container'

      - ${{ if contains(parameters.PublishStore, true) }}:
        - task: GooglePlayRelease@4
          displayName: Publicando no teste interno
          inputs:
            serviceConnection: 'FiveHighGooglePlay'
            applicationId: 'com.maui.azurepipeline.approval'
            action: 'SingleBundle'
            bundleFile: '**/*.aab'
            track: 'internal'

    - job: Job_iOS
      displayName: Build iOS
      dependsOn: []
      pool:
        vmimage: 'macOS-latest'
        demands:
        - MSBuild
      steps:

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version:  ${{ parameters.dotnetVersion }}

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: 'Certificados.p12'
          certPwd: $(apple_cert_pass)
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'Apple_Distribution_Devops_Approval.mobileprovision'

      - task: Bash@3
        displayName: Install MAUI
        inputs:
          targetType: 'inline'
          script: |
            dotnet nuget locals all --clear 
            cd "Maui.AzurePipelines/"
            dotnet workload restore

      - task: Bash@3
        displayName: Build IOS App
        inputs:
          targetType: 'inline'
          script: |
            cd "Maui.AzurePipelines/"
            dotnet publish Maui.AzurePipelines.csproj -f net7.0-ios -c Release /p:ApplicationDisplayVersion=$(Major).$(Minor).$(Rev) /p:ApplicationVersion=$(Build.BuildId)

      - task: CopyFiles@2
        inputs:
          Contents: |
            **/*.app
            **/*.ipa
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop_ios'
          publishLocation: 'Container'

 - stage: unit_test
   displayName: "Testes de unidade"
   dependsOn: []
   jobs:
    - job: tags
      displayName: Tag build
      pool:
        vmimage: 'windows-latest'
      steps:
      - checkout: none

      - task: Bash@3
        displayName: Preparing tags
        inputs: 
          targetType: 'inline'
          script: |

            Repo=$(echo 'repo-$(Build.Repository.Name)' | tr '[:upper:]' '[:lower:]' | sed -r 's/[ :_.]+/-/g')
            echo "##vso[task.setvariable variable=repo]${Repo}"

            Pipe=$(echo 'pipe-$(Build.DefinitionName)' | tr '[:upper:]' '[:lower:]' | sed -r 's/[ :_.]+/-/g')
            echo "##vso[task.setvariable variable=pipe]${Pipe}"

            echo "##vso[build.addbuildtag]${Pipe}"
            echo "##vso[build.addbuildtag]${Repo}"

 - ${{ if contains(parameters.PublishStore, 'true') }}:
  - stage: deployStage
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
      - build_android_ios
      - unit_test

    displayName: Deploy Stage
    jobs:
      - deployment: ios
        dependsOn: []
        environment: AzureDevops Mobile - Staging
        displayName: "Publish IOS - TestFlight"
        pool:
          vmImage: "macos-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadBuildArtifacts@1
                  displayName: "Download IPA"
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop_ios"
                    downloadPath: "$(System.ArtifactsDirectory)"

                - task: AppStoreRelease@1
                  displayName: "Publish to the App Store TestFlight track"
                  inputs:
                    serviceEndpoint: 'FiveHighAppleStore'
                    releaseTrack: 'TestFlight'
                    appIdentifier: 'com.maui.azurepipeline.approval'
                    appType: 'iOS'
                    ipaPath: '$(System.ArtifactsDirectory)/**/*.ipa'
                    shouldSkipWaitingForProcessing: true
                    shouldSkipSubmission: true